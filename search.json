[{"title":"好用的快捷键和操作","path":"/2025/06/06/好用的快捷键或操作/","content":"MAC系统操作截图到剪切板mac:shift+control+command+4 VSCODE单行上下移动mac:shift+option+up/down 多行上下移动mac:shift+option+command+up/down 开关左侧项目树mac:command+1 重命名文件mac:fn+shift+f6 VSCODE picgo插件上传到图床mac:option+command+u 关闭终端窗口mac:command+j 终端Warp到hexo根目录cd /Users/mac/Blog/JakicDong.github.io hexo清理并且重新上传hexo clean hexo g hexo d 本地部署hexo s Edge浏览器标签页左右移动mac:command+option+left/right 关闭标签页mac:command+w 开发者工具mac:command+option+i fn+f12","tags":["快捷键"]},{"title":"java30天学习笔记","path":"/2025/06/06/java30天笔记/","content":"杂项最好不使用 clone()来进行复制,可以使用拷贝构造函数或拷贝工厂来复制对象. 抽象类提供了⼀种 IS-A 的关系接⼝更像是⼀种 LIKE-A 关系 Fail-Fast 机制Fail-Fast 机制是 Java 集合(Collection)中的⼀种错误机制。当多个线程对同一个集合的内容进⾏操作时，就可能产⽣线程安全问题。Fail-Fast 机制会⾃动检测到线程安全问题,在操作前后比较集合的结构变化次数是否相同，并抛出 ConcurrentModificationException 异常。 tips:禁⽌在foreach⾥执⾏元素的删除操作 容器的一些解析vector和arraylist的比较vector是同步的，所以开销更大vector每次扩容请求2倍，而arraylist是1.5倍 如果对线程安全有要求的话，可以选择Collections.synchronizedList() 或者使用CopyOnWriteArrayList保证线程安全。 CopyOnWriteArrayList写操作在拷贝的数组上进行，而读操作在原数组上进行。写操作需要加锁，防止并发写操作。适用于读多写少的场景。问题:内存占用约占原数组的两倍。数据一致性问题。 所以CopyOnWriteArrayList更加适合对内存不敏感以及实时性要求很高的场景。 LinkedListArrayList是基于数组实现的，而LinkedList是基于链表实现的。数组支持随机访问，而链表不支持随机访问。数组的插入和删除操作需要移动元素，而链表的插入和删除操作只需要修改指针。数组的空间利用率高，而链表的空间利用率低。LinkedList适用于需要频繁插入和删除元素的场景。 HashMap相当于分成了很多个桶，每个桶里面是一个链表，链表的每个节点是一个键值对，使用头插法插入节点。 ConcurrentHashMapConcurrentHashMap是线程安全的HashMap，它的实现方式是使用分段锁。ConcurrentHashMap将整个HashMap分成了多个段，每个段都是一个HashMap。每个段都有一个锁，当一个线程访问一个段时，其他线程也可以访问其他段。 LinkedHashMapLinkedHashMap是HashMap的子类，它的实现方式是使用双向链表。LinkedHashMap的迭代顺序是插入顺序或者访问顺序。可以通过LinkedHashMap实现LRU缓存。 WeakHashMap主要是用来实现缓存的。WeakHashMap的键是弱引用，当键不再被引用时，键值对会被自动移除。WeakHashMap的迭代器是弱引用的，所以在迭代时可能会出现空指针异常。 ConcurrentCacheConcurrentCache是一个线程安全的缓存，它的实现方式是使用ConcurrentHashMap。 并发篇","tags":["java"]},{"title":"2025.6.6学习日记","path":"/2025/06/06/学习日记/2025.6.6学习笔记/","content":"学习内容1. 优化了一下个人博客的图片上传工作流由于大部分笔记在语雀中,导致图片上传后外链无法访问,所以今天通过picgo➕github搭建了一个图床.具体流程如下: 首先需要在github中创建一个仓库,用来存放图片 然后在picgo中配置github的仓库,将图片上传到github中操作如下:mac:shift+control+command+4 截图 然后在vscode中option+command+u上传到图床后会自动生成markdown的链接. 2. 优化了一下自己记笔记发博客的工作流语雀写笔记还是太麻烦了。所以准备以后还是用vscode写笔记,然后直接运行一行命令同步到仓库,而且还有补全工具。 3. 力扣每日一题思路很清晰，贪心加一个栈的模拟题，实现有一些小细节需要注意。 4. 看了java容器相关的八股文记在java30天笔记里面了。","tags":["日记","算法","picgo","leetcode","基础"]},{"title":"Hello World","path":"/2025/06/05/hello-world/","content":"hexo的基本使用和模板常用模版 ---title: 个人博客搭建tags: [博客, hexo]date: 2025-06-01--- 快捷部署: hexo clean hexo g hexo d Quick Start创建一篇文章$ hexo new My New Post 更多信息: Writing 运行服务$ hexo server 更多信息: Server 生成静态文件$ hexo generate 更多信息: Generating 部署到远程站点$ hexo deploy 更多信息: Deployment 文章模版---# 基本信息title: title date: date tags: []categories: []description: # excerpt 也可 # 封面cover: banner: poster: # 海报（可选，全图封面卡片） topic: 标题上方的小字 # 可选 headline: 大标题 # 必选 caption: 标题下方的小字 # 可选 color: 标题颜色 # 可选# 插件sticky: # 数字越大越靠前mermaid:katex: mathjax: # 可选topic: # 专栏 idauthor: references:comments: # 设置 false 禁止评论indexing: # 设置 false 避免被搜索breadcrumb: # 设置 false 隐藏面包屑导航leftbar: rightbar:h1: # 设置为 隐藏标题type: # tech/story---","tags":["欢迎页"]},{"title":"2025.6.5学习日记","path":"/2025/06/05/学习日记/2025.6.5学习日记/","content":"学习内容1. hexo轻量化框架搭建个人博客搭建了个人博客网站.简化了一下笔记的流程:直接本地写markdown笔记然后直接运行一行命令同步太仓库,比较方便.todo:后期可以考虑加一个打卡墙. 2. leetcode每日一题并查集的题,太久没做图论有点忘了 class Solution public String smallestEquivalentString(String s1, String s2, String baseStr) int[] fa = new int[26]; for (int i = 0; i 26; i++) fa[i] = i; for (int i = 0; i s1.length(); i++) merge(fa, s1.charAt(i) - a, s2.charAt(i) - a); char[] s = baseStr.toCharArray(); for (int i = 0; i s.length; i++) s[i] = (char) (find(fa, s[i] - a) + a); return new String(s); private int find(int[] fa, int x) if (fa[x] != x) fa[x] = find(fa, fa[x]); return fa[x]; private void merge(int[] fa, int x, int y) int fx = find(fa, x); int fy = find(fa, y); // 把大的代表元指向小的代表元 if (fx fy) fa[fy] = fx; else fa[fx] = fy; 3. 健身练胸日","tags":["日记","算法"]},{"title":"算法题刷题笔记","path":"/2025/06/05/算法题刷题笔记/","content":"常用操作ACM 格式import java.util.*;import java.io.*;public class Main public static void main(String[] args) throws IOException BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); String line; while ((line = br.readLine()) != null) // 逐行读取 int n = Integer.parseInt(line.trim()); int[] nums = new int[n]; String[] parts = br.readLine().split( ); for (int i = 0; i n; i++) nums[i] = Integer.parseInt(parts[i]); // 处理逻辑 // 输出结果 System.out.println(result); public static void main(String[] args) Scanner scanner = new Scanner(System.in); String s = scanner.next(); System.out.println(replaceNumber(s)); scanner.close(); import java.util.*;import java.io.*;public static void main(String[] args) Scanner scanner = new Scanner(System.in); String s = scanner.next(); System.out.println(replaceNumber(s)); scanner.close(); 杂项操作绝对值: Math.abs(); Int最大值: Integer.MAX_VALUE 取随机值： import java.util.Random;import java.util.concurrent.ThreadLocalRandom;public class RandomDemo public static void main(String[] args) int n = 10; //0~9 // 方法1: Math.random() int random1 = (int) (Math.random() * n); System.out.println(Math.random(): + random1); // 方法2: Random类 Random rand = new Random(); int random2 = rand.nextInt(n); System.out.println(Random: + random2); // 方法3: ThreadLocalRandom（多线程安全） int random3 = ThreadLocalRandom.current().nextInt(n); System.out.println(ThreadLocalRandom: + random3); Array 常用操作// ========== 数组声明与初始化 ==========int[] arr = new int[5]; // 创建空数组 [0,0,0,0,0]int[] nums = 3,1,4,5,2; // 直接初始化String[] strArr = A, B, C; // 字符串数组int[][] matrix = 1,2, 3,4,5; // 二维数组// ========== 基本操作 ==========// 访问元素int first = nums[0]; // 获取第一个元素 → 3nums[2] = 9; // 修改元素 → [3,1,9,5,2]// 获取长度int len = nums.length; // 一维数组长度 → 5int cols = matrix[1].length; // 二维数组第二维长度 → 3// ========== 遍历操作 ==========// 普通for循环for(int i=0; inums.length; i++) System.out.print(nums[i] + ); // 3 1 9 5 2// 增强for循环for(int num : nums) System.out.print(num + );// 二维数组遍历for(int[] row : matrix) for(int n : row) System.out.print(n + ); // 1 2 / 3 4 5 // ========== 数组工具操作 ==========// 排序Arrays.sort(nums); // 排序后 → [1,2,3,5,9]// 复制int[] copy1 = Arrays.copyOf(nums, 3); // 复制前3元素 → [1,2,3]int[] copy2 = Arrays.copyOfRange(nums, 1, 4); // 复制1-3索引 → [2,3,5]// 比较boolean isEqual = Arrays.equals(nums, copy1); // false// 填充Arrays.fill(nums, 0); // 全部填充0 → [0,0,0,0,0]Arrays.fill(nums, 1, 3, 5); // 索引1-2填充5 → [0,5,5,0,0]// ========== 类型转换 ==========// 数组转List（固定大小）ListInteger list = Arrays.asList(1,2,3); // 数组转StreamIntStream stream = Arrays.stream(nums);// ========== 其他操作 ==========// 二分查找（需先排序）int index = Arrays.binarySearch(nums, 5); // 返回元素索引// 多维数组操作int[][] matrixCopy = Arrays.copyOf(matrix, matrix.length); // 浅拷贝String deepStr = Arrays.deepToString(matrix); // [[1, 2], [3, 4, 5]]// 反转数组for(int i=0; inums.length/2; i++) int temp = nums[i]; nums[i] = nums[nums.length-1-i]; nums[nums.length-1-i] = temp; Array 排序： 升序排序： Arrays.sort(array); 降序排序： Arrays.sort(Collections.reverseOrder()); 和 int 数组相互转换： Integer[] arr = 1,2,3;ArrayListInteger list = new ArrayList(Arrays.asList(arr));ArrayListInteger list = new ArrayList();Integer[] arr = list.toArray(new Integer[0]);//但是如何转成int[]数组呢//方法1 arr = list.stream().mapToInt(Integer::valueOf).toArray(); List 常用操作// ====================== 1. 初始化 List ======================ListString arrayList = new ArrayList(); // 可修改列表ListInteger linkedList = new LinkedList(); ListString immutableList = List.of(A, B, C); // Java9+ 不可变列表// ====================== 2. 添加元素 ======================arrayList.add(Apple); // 末尾添加arrayList.add(0, Banana); // 索引0插入arrayList.addAll(List.of(Orange, Grape)); // 批量添加// ====================== 3. 访问元素 ======================String firstElement = arrayList.get(0); // Bananaboolean containsApple = arrayList.contains(Apple); // trueint indexOfOrange = arrayList.indexOf(Orange); // 2// ====================== 4. 删除元素 ======================arrayList.remove(Banana); // 按值删除arrayList.remove(0); // 按索引删除arrayList.clear(); // 清空列表// ====================== 5. 修改元素 ======================arrayList.add(Mango);arrayList.set(0, Pineapple); // 修改索引0的元素// ====================== 6. 遍历 List ======================// 方式1: 普通for循环for (int i = 0; i arrayList.size(); i++) System.out.println(arrayList.get(i));// 方式2: 增强for循环for (String fruit : arrayList) System.out.println(fruit);// 方式3: 迭代器IteratorString it = arrayList.iterator();while (it.hasNext()) System.out.println(it.next());// 方式4: forEach + LambdaarrayList.forEach(System.out::println);// ====================== 7. 其他操作 ======================int size = arrayList.size(); // 列表长度boolean isEmpty = arrayList.isEmpty(); // 是否为空ListString subList = arrayList.subList(0, 2); // 截取子列表Object[] array = arrayList.toArray(); // 转为数组// ====================== 8. 注意事项 ======================/*1. ArrayList初始容量10，扩容1.5倍 2. LinkedList用节点链接实现3. 线程不安全，多线程环境使用：ListString syncList = Collections.synchronizedList(new ArrayList());4. 快速失败机制(fast-fail)：遍历时修改会抛出ConcurrentModificationException*/ import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class TwoDListExample public static void main(String[] args) // ====================== // 1. 创建二维List // ====================== // 方法1: 使用Arrays.asList()初始化 ListListInteger matrix1 = new ArrayList(); matrix1.add(Arrays.asList(1, 2, 3)); matrix1.add(Arrays.asList(4, 5, 6)); matrix1.add(Arrays.asList(7, 8, 9)); // 方法2: 动态创建空二维List ListListString matrix2 = new ArrayList(); // 方法3: 使用嵌套循环初始化 ListListCharacter matrix3 = new ArrayList(); for (int i = 0; i 3; i++) ListCharacter row = new ArrayList(); for (int j = 0; j 4; j++) row.add((char) (A + i + j)); matrix3.add(row); // ====================== // 2. 添加元素 // ====================== // 添加新行 matrix2.add(new ArrayList(Arrays.asList(Java, Python))); matrix2.add(new ArrayList(Arrays.asList(C++, JavaScript))); // 在指定行添加元素 matrix2.get(0).add(Ruby); // 第一行添加元素 matrix2.get(1).add(0, Go); // 第二行开头插入元素 // 添加新行（空行） matrix2.add(new ArrayList()); matrix2.get(2).add(Swift); // 给新行添加元素 // ====================== // 3. 访问元素 // ====================== // 访问单个元素 int element = matrix1.get(1).get(2); // 获取第二行第三列元素 → 6 String lang = matrix2.get(0).get(1); // 获取第一行第二列元素 → Python // 获取行数 int rows = matrix1.size(); // 获取列数（特定行） int colsRow0 = matrix1.get(0).size(); int colsRow2 = matrix2.get(2).size(); // ====================== // 4. 修改元素 // ====================== matrix1.get(0).set(0, 100); // 修改第一行第一列: 1 → 100 matrix2.get(1).set(2, TypeScript); // 修改第二行第三列 // ====================== // 5. 删除元素 // ====================== // 删除指定位置的元素 matrix1.get(2).remove(1); // 删除第三行第二列元素(8) // 删除整行 matrix2.remove(2); // 删除第三行 // ====================== // 6. 遍历二维List // ====================== System.out.println( 遍历matrix1:); // 方法1: 索引遍历 for (int i = 0; i matrix1.size(); i++) for (int j = 0; j matrix1.get(i).size(); j++) System.out.print(matrix1.get(i).get(j) + ); System.out.println(); System.out.println( 遍历matrix2:); // 方法2: 增强for循环 for (ListString row : matrix2) for (String item : row) System.out.print(item + ); System.out.println(); System.out.println( 遍历matrix3:); // 方法3: 使用forEach + lambda matrix3.forEach(row - row.forEach(item - System.out.print(item + )); System.out.println(); ); // ====================== // 7. 其他常用操作 // ====================== // 检查是否为空 boolean isEmpty = matrix2.isEmpty(); // 检查是否包含元素 boolean containsPython = matrix2.get(0).contains(Python); // 查找元素位置 int rowIndex = -1, colIndex = -1; for (int i = 0; i matrix1.size(); i++) int index = matrix1.get(i).indexOf(5); if (index != -1) rowIndex = i; colIndex = index; break; // 转换为二维数组 String[][] array2D = new String[matrix2.size()][]; for (int i = 0; i matrix2.size(); i++) ListString row = matrix2.get(i); array2D[i] = row.toArray(new String[0]); // 打印结果 System.out.println( matrix1: + matrix1); System.out.println(matrix2: + matrix2); System.out.println(matrix3: + matrix3); System.out.println(找到数字5的位置: [ + rowIndex + ][ + colIndex + ]); HashSet 常用操作// =================== HashSet 基础操作 ===================import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.Set;// 创建对象SetString set = new HashSet(); // 空集合（默认初始容量16，负载因子0.75）SetInteger initSet = new HashSet(32); // 指定初始容量SetString prefilled = new HashSet(Arrays.asList(A, B, C)); // 通过集合初始化// 元素操作boolean added = set.add(Apple); // 添加元素 → true（首次添加）boolean dupAdd = set.add(Apple); // 添加重复元素 → falseboolean hasBanana = set.contains(Apple); // 检查存在 → trueboolean removed = set.remove(Apple); // 删除元素 → true（存在时）set.clear(); // 清空集合// 批量操作SetString fruits = new HashSet(Arrays.asList(Orange, Mango));boolean addedAll = set.addAll(fruits); // 合并集合 → true（集合改变时）boolean retainAll = set.retainAll(Arrays.asList(Mango)); // 保留交集 → true（集合改变时）boolean removeAll = set.removeAll(fruits); // 删除所有匹配元素 → true（集合改变时）// 遍历操作set.add(Apple);set.add(Banana);for (String item : set) // 增强for循环（无序） System.out.print(item + ); // 输出顺序不确定（如 Banana Apple）IteratorString it = set.iterator(); // 迭代器遍历while (it.hasNext()) System.out.print(it.next() + );set.forEach(item - System.out.print(item)); // Java8+ Lambda遍历// 集合信息int size = set.size(); // 元素数量（如 2）boolean isEmpty = set.isEmpty(); // 是否空集合 → falseObject[] array = set.toArray(); // 转Object数组String[] strArray = set.toArray(new String[0]); // 转指定类型数组// 特殊操作SetString cloneSet = (HashSetString) ((HashSetString) set).clone(); // 浅拷贝SetString syncSet = Collections.synchronizedSet(set); // 线程安全包装// 集合运算示例SetString set1 = new HashSet(Arrays.asList(A, B));SetString set2 = new HashSet(Arrays.asList(B, C));SetString union = new HashSet(set1); // 并集 → [A, B, C]union.addAll(set2);SetString intersection = new HashSet(set1); // 交集 → [B]intersection.retainAll(set2);SetString difference = new HashSet(set1); // 差集 → [A]difference.removeAll(set2);/* 核心特性：1. 唯一性：基于 hashCode() 和 equals() 判断重复2. 无序性：遍历顺序不保证与插入顺序一致3. 允许 null 元素（但只能有一个 null）4. 基础操作时间复杂度：add/remove/contains → 平均 O(1)5. 非线程安全：需通过 Collections.synchronizedSet 包装实现线程安全*/ HashMap 常用操作// =================== HashMap 基础操作 ===================import java.util.Collections;import java.util.HashMap;import java.util.Map;import java.util.Set;// 创建对象MapString, Integer map = new HashMap(); // 默认容量16，负载因子0.75MapString, String initMap = new HashMap(32); // 指定初始容量MapString, Integer prefilled = new HashMap(Map.of(A, 1, B, 2)); // Java9+快速初始化// 增删改操作map.put(Apple, 10); // 添加键值对 → Apple=10map.put(Banana, 20); // → Apple=10, Banana=20map.putIfAbsent(Apple, 50); // 仅当键不存在时添加 → 原值10保持不变map.replace(Apple, 15); // 替换已有键的值 → Apple=15, Banana=20map.remove(Banana); // 删除键 → Apple=15map.replace(Apple, 15, 20); // 键值匹配时替换 → Apple=20map.clear(); // 清空映射// 查询操作int count = map.get(Apple); // 获取值（需确保键存在）Integer countSafe = map.get(Orange); // 键不存在时返回nullboolean existsKey = map.containsKey(Apple); // 检查键是否存在 → trueboolean existsValue = map.containsValue(20); // 检查值是否存在 → trueint size = map.size(); // 键值对数量boolean isEmpty = map.isEmpty(); // 是否为空映射// 遍历操作（4种方式）// 1. Entry遍历（推荐）for (Map.EntryString, Integer entry : map.entrySet()) System.out.println(entry.getKey() + : + entry.getValue());// 2. Key遍历for (String key : map.keySet()) System.out.println(key + - + map.get(key));// 3. Value遍历for (Integer value : map.values()) System.out.println(Value: + value);// 4. Java8+ Lambda遍历map.forEach((k, v) - System.out.println(k + = + v));// 批量操作MapString, Integer newItems = Map.of(Cherry, 5, Durian, 8);map.putAll(newItems); // 合并映射 → Apple=20, Cherry=5, Durian=8// 特殊值处理map.put(null, 0); // 允许null键 → null=0map.put(Mango, null); // 允许null值 → null=0, Mango=null// 高级操作（Java8+）map.computeIfAbsent(Orange, k - 3); // 不存在时计算 → 添加 Orange=3map.computeIfPresent(Apple, (k, v) - v + 5); // 存在时更新 → Apple=25map.merge(Apple, 10, (oldVal, newVal) - oldVal + newVal); // 合并值 → Apple=35// 线程安全包装MapString, Integer syncMap = Collections.synchronizedMap(map);// 不可变映射（Java9+）MapString, Integer immutableMap = Map.ofEntries( Map.entry(A, 1), Map.entry(B, 2));/* 核心特性：1. 键唯一性：基于 hashCode() 和 equals() 判断重复2. 无序存储：迭代顺序不保证与插入顺序一致3. 允许一个null键和多个null值4. 基础操作时间复杂度：get/put → 平均 O(1)5. 扩容机制：当元素数量超过（容量*负载因子）时自动翻倍扩容6. 树化优化：当链表长度超过8时转红黑树（Java8+）*/ HashMapCharacter, Integer hm_s = new HashMap();//遍历字符串的所有字符（更清晰的逻辑）for (char c : s.toCharArray()) hm_s.merge(c, 1, Integer::sum);// 使用getOrDefault避免NullPointerExceptionint countS = hm_s.getOrDefault(c, 0); 一个 Key 只能对应一个值，所以如果要实现类似 Multimap 的结构需要如下方式： //初始化HashMapString, ListInteger multiValueMap = new HashMap();/////添加元素if (!multiValueMap.containsKey(scores)) multiValueMap.put(scores, new ArrayList());multiValueMap.get(scores).add(90);// 若键不存在，自动创建空列表multiValueMap.computeIfAbsent(scores, k - new ArrayList()).add(90);multiValueMap.computeIfAbsent(scores, k - new ArrayList()).add(85);////访问元素//获取某个键的所有值ListInteger scores = multiValueMap.get(scores);if (scores != null) for (int num : scores) System.out.println(num); //输出 90, 85 //避免 NullPointerException的情况ListInteger scores = multiValueMap.getOrDefault(scores, new ArrayList());for (int num : scores) System.out.println(num);////删除元素//删除整个键值对multiValueMap.remove(scores);// 删除某个键的特定值ListInteger scores = multiValueMap.get(scores);if (scores != null) scores.remove(Integer.valueOf(90)); // 删除值为 90 的元素 // 如果列表为空，可选删除键 if (scores.isEmpty()) multiValueMap.remove(scores); ////遍历哈希表// 遍历所有键值对for (Map.EntryString, ListInteger entry : multiValueMap.entrySet()) String key = entry.getKey(); ListInteger values = entry.getValue(); System.out.println(key + : + values);//遍历所有键for (String key : multiValueMap.keySet()) System.out.println(Key: + key);//遍历所有值for (ListInteger values : multiValueMap.values()) System.out.println(Values: + values); String的常用操作// =================== String 常用操作 ===================// 创建对象String str1 = Hello; // 直接量创建（字符串常量池）String str2 = new String(World); // 堆内存新对象char[] chars = J,a,v,a;String str3 = new String(chars); // 通过字符数组创建 → Java// 基本操作int len = str1.length(); // 获取长度 → 5char c = str1.charAt(1); // 获取索引1字符 → eString substr1 = str1.substring(2); // 从索引2截取 → lloString substr2 = str1.substring(1,4); // 截取1-3索引 → ellString concatStr = str1.concat( World);// 拼接 → Hello WorldString upper = str1.toUpperCase(); // 转大写 → HELLOString lower = HELLO.toLowerCase(); // 转小写 → helloString trimStr = text .trim(); // 去首尾空格 → textString replaced = str1.replace(l, L);// 替换字符 → HeLLoString replacedAll = a1b2c3.replaceAll(\\\\d, #); // 正则替换 → a#b#c#// 转换与比较char[] arr = str1.toCharArray(); // 转字符数组 → [H,e,l,l,o]byte[] bytes = str1.getBytes(); // 按默认编码转字节数组boolean eq1 = str1.equals(Hello); // 值比较 → trueboolean eq2 = str1.equalsIgnoreCase(hElLo); // 忽略大小写 → trueint cmp = str1.compareTo(Hella); // 字典序比较 → 正数（o a）// 正则处理boolean matches = 123.matches(\\\\d+); // 正则匹配 → trueString[] parts = a,b,c.split(,); // 分割字符串 → [a,b,c]String[] regexParts = a1b2c3.split(\\\\d); // 按数字分割 → [a,b,c]// 格式化处理String format1 = String.format(%s-%d, ID, 100); // → ID-100String format2 = String.join(|, A, B, C); // → A|B|C// 特殊判断boolean isEmpty = .isEmpty(); // 空字符串 → trueboolean isBlank = .isBlank(); // 全空白字符（Java 11+） → trueboolean starts = str1.startsWith(He); // 开头判断 → trueboolean ends = str1.endsWith(lo); // 结尾判断 → true/* 核心特性：1. 不可变性：所有操作返回新字符串，原对象不变2. 字符串常量池复用机制：直接量赋值优先使用常量池3. 支持正则表达式操作（split/matches/replaceAll等）4. 包含丰富的格式化方法（format/join等）*/ int转String String s = String.valueOf(i); String s = Integer.toString(i); string 转 int String str “123”; int num Integer.parseInt(str); StringBuffer 和 StringBuilderStringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。 由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。 // =================== StringBuilder ===================// 创建对象StringBuilder sb = new StringBuilder(); // 默认容量16StringBuilder sb2 = new StringBuilder(Hello); // 指定初始内容// 基本操作sb.append( World); // 追加内容 → Hello Worldsb.insert(5, Java); // 指定位置插入 → Hello Java Worldsb.delete(5, 10); // 删除5-9位置 → Hello Worldsb.replace(6, 11, Earth); // 替换指定区间 → Hello Earthsb.reverse(); // 反转 → htraE olleH sb.setLength(5); // 截断保留前5字符 → htraEchar c = sb.charAt(2); // 获取索引2的字符 → rsb.setCharAt(0, H); // 修改索引0字符 → HtraEint len = sb.length(); // 获取当前长度 → 5String s = sb.toString(); // 转换为String// 链式调用StringBuilder sb3 = new StringBuilder() .append(123) // 支持多类型 .append(3.14) .append(true);// =================== StringBuffer ===================// 创建对象（操作方法与StringBuilder完全一致）StringBuffer sbf = new StringBuffer(); sbf.append(100); // 追加数值sbf.insert(3, new char[]A,B); // 插入字符数组sbf.deleteCharAt(4); // 删除单个字符sbf.setLength(0); // 清空缓冲区（复用对象）// 线程安全示例sbf.append(ThreadSafe); // 所有方法都有synchronized修饰符/* 共性特征：1. 初始容量16，自动扩容（每次扩容2n+2）2. append() 支持所有基础类型/Object类型3. 修改后对象地址不变（与String的不可变性对比）4. 主要方法：append/insert/delete/replace/reverse*/String s1 = buffer.toString(); // StringBuffer → StringString s2 = builder.toString(); // StringBuilder → String PriorityQueue的常用操作最大堆（降序优先队列） PriorityQueue pq new PriorityQueue((a, b) - b - a); 自定义比较器： (a, b) - b - a 是一个 Lambda 表达式，用作自定义比较器。它通过计算 b - a 来确定元素的优先级： 当结果为正数时，说明 a 应排在 b 之后，即 b 的优先级更高。 当结果为负数或零时，a 的优先级不低于 b。 与默认行为的对比： 默认情况下，优先队列使用自然顺序（最小堆），即 a - b，队首元素是最小值。 此处通过 b - a 反转顺序，使队首元素变为最大值，形成最大堆。 Deque 的常用操作import java.util.Deque;import java.util.ArrayDeque;import java.util.Iterator;// 初始化 Deque（以 ArrayDeque 为例）DequeString deque = new ArrayDeque();// ================== 插入操作 ==================// 队头插入deque.addFirst(A); // 插入元素到队头（容量满时抛出 IllegalStateException）deque.offerFirst(B); // 插入元素到队头（容量满时返回 false）// 队尾插入deque.addLast(C); // 插入元素到队尾（容量满时抛出 IllegalStateException）deque.offerLast(D); // 插入元素到队尾（容量满时返回 false）// 批量插入（从 Collection 继承）deque.addAll(List.of(E, F)); // 依次插入队尾// ================== 删除操作 ==================// 队头删除String first1 = deque.removeFirst(); // 删除并返回队头元素（空队列抛 NoSuchElementException）String first2 = deque.pollFirst(); // 删除并返回队头元素（空队列返回 null）// 队尾删除String last1 = deque.removeLast(); // 删除并返回队尾元素（空队列抛异常）String last2 = deque.pollLast(); // 删除并返回队尾元素（空队列返回 null）// 删除指定元素（从队头开始搜索）boolean removed1 = deque.remove(E); // 删除第一个出现的 Eboolean removed2 = deque.removeFirstOccurrence(F); // 删除队头方向第一个 Fboolean removed3 = deque.removeLastOccurrence(G); // 删除队尾方向第一个 G// ================== 查看元素 ==================// 查看队头String head1 = deque.getFirst(); // 返回队头元素（空队列抛异常）String head2 = deque.peekFirst(); // 返回队头元素（空队列返回 null）// 查看队尾String tail1 = deque.getLast(); // 返回队尾元素（空队列抛异常）String tail2 = deque.peekLast(); // 返回队尾元素（空队列返回 null）// ================== 队列状态 ==================boolean isEmpty = deque.isEmpty(); // 判断队列是否为空int size = deque.size(); // 返回元素数量boolean exists = deque.contains(A); // 判断是否包含元素 A// ================== 其他操作 ==================// 清空队列deque.clear();// 转换为数组Object[] array1 = deque.toArray(); // 返回 Object[]String[] array2 = deque.toArray(new String[0]); // 指定类型数组// 迭代器（正向：队头 → 队尾）IteratorString iterator = deque.iterator();while (iterator.hasNext()) String element = iterator.next();// 反向迭代器（队尾 → 队头）IteratorString descendingIterator = deque.descendingIterator();while (descendingIterator.hasNext()) String element = descendingIterator.next();// ================== 栈操作（Deque 兼容的额外方法）==================deque.push(X); // 等效于 addFirst()String popped = deque.pop(); // 等效于 removeFirst()// ================== 容量限制队列（如 LinkedBlockingDeque）==================// 阻塞操作示例（需使用线程安全 Deque，此处仅展示方法）/*deque.offerFirst(W, 1, TimeUnit.SECONDS); // 等待1秒尝试插入队头deque.offerLast(Z, 1, TimeUnit.SECONDS); // 等待1秒尝试插入队尾String item = deque.pollFirst(1, TimeUnit.SECONDS); // 等待1秒尝试取出队头*/ 数组题目二分查找https://leetcode.cn/problems/binary-search/ 通用模板： class Solution public int search(int[] nums, int target) int i = lowerBound(nums, target); // 选择其中一种写法即可 return i nums.length nums[i] == target ? i : -1; // 【下面列了三种写法，选一种自己喜欢的就行】 // lowerBound 返回最小的满足 nums[i] = target 的 i // 如果数组为空，或者所有数都 target，则返回 nums.length // 要求 nums 是非递减的，即 nums[i] = nums[i + 1] // 闭区间写法 private int lowerBound(int[] nums, int target) int left = 0, right = nums.length - 1; // 闭区间 [left, right] while (left = right) // 区间不为空 // 循环不变量： // nums[left-1] target // nums[right+1] = target int mid = left + (right - left) / 2; if (nums[mid] target) left = mid + 1; // 范围缩小到 [mid+1, right] else right = mid - 1; // 范围缩小到 [left, mid-1] return left; // 或者 right+1 // 左闭右开区间写法 private int lowerBound2(int[] nums, int target) int left = 0, right = nums.length; // 左闭右开区间 [left, right) while (left right) // 区间不为空 // 循环不变量： // nums[left-1] target // nums[right] = target int mid = left + (right - left) / 2; if (nums[mid] target) left = mid + 1; // 范围缩小到 [mid+1, right) else right = mid; // 范围缩小到 [left, mid) return left; // 或者 right // 开区间写法 private int lowerBound3(int[] nums, int target) int left = -1, right = nums.length; // 开区间 (left, right) while (left + 1 right) // 区间不为空 // 循环不变量： // nums[left] target // nums[right] = target int mid = left + (right - left) / 2; if (nums[mid] target) left = mid; // 范围缩小到 (mid, right) else right = mid; // 范围缩小到 (left, mid) return right; // 或者 left+1 移除元素https://leetcode.cn/problems/remove-element/ 双指针 有序数组的平方https://leetcode.cn/problems/squares-of-a-sorted-array/ 双指针 长度最小的子数组https://leetcode.cn/problems/minimum-size-subarray-sum/ 螺旋矩阵IIhttps://leetcode.cn/problems/spiral-matrix-ii/ 模拟 区间和https://kamacoder.com/problempage.php?pid=1070 ACM输入输出模式（笔试面试必备） import java.util.Scanner;public class Main public static void main(String[] args) Scanner scanner = new Scanner(System.in); int n = scanner.nextInt(); int [] pre = new int [n]; int [] nums = new int [n]; for(int i = 0;in;++i) nums[i] = scanner.nextInt(); int sum = 0; for(int i = 0;in;++i) sum += nums[i]; pre[i] = sum; while(scanner.hasNextInt()) int a = scanner.nextInt(); int b = scanner.nextInt(); if(a == 0) System.out.println(pre[b]); else System.out.println(pre[b]-pre[a-1]); scanner.close(); 开发商购买土地题目链接 总结数组理论基础数组是非常基础的数据结构，在面试中，考察数组的题目一般在思维上都不难，主要是考察对代码的掌控能力 也就是说，想法很简单，但实现起来 可能就不是那么回事了。 首先要知道数组在内存中的存储方式，这样才能真正理解数组相关的面试题 数组是存放在连续内存空间上的相同类型数据的集合。 数组可以方便的通过下标索引的方式获取到下标对应的数据。 举一个字符数组的例子，如图所示： 需要两点注意的是 数组下标都是从0开始的。 数组内存空间的地址是连续的 正是因为数组在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址。 例如删除下标为3的元素，需要对下标为3的元素后面的所有元素都要做移动操作，如图所示： 数组的元素是不能删的，只能覆盖。 那么二维数组直接上图，大家应该就知道怎么回事了 那么二维数组在内存的空间地址是连续的么？ 我们来举一个Java的例子，例如： int[][] rating = new int[3][4]; ， 这个二维数组在内存空间可不是一个 3*4 的连续地址空间 看了下图，就应该明白了： 所以Java的二维数组在内存中不是 3*4 的连续地址空间，而是四条连续的地址空间组成！ 数组的经典题目在面试中，数组是必考的基础数据结构。 其实数组的题目在思想上一般比较简单的，但是如果想高效，并不容易。 我们之前一共讲解了四道经典数组题目，每一道题目都代表一个类型，一种思想。 二分法数组：每次遇到二分法，都是一看就会，一写就废 这道题目呢，考察数组的基本操作，思路很简单，但是通过率在简单题里并不高，不要轻敌。 可以使用暴力解法，通过这道题目，如果追求更优的算法，建议试一试用二分法，来解决这道题目 暴力解法时间复杂度：O(n) 二分法时间复杂度：O(logn) 在这道题目中我们讲到了循环不变量原则，只有在循环中坚持对区间的定义，才能清楚的把握循环中的各种细节。 二分法是算法面试中的常考题，建议通过这道题目，锻炼自己手撕二分的能力。 双指针法 数组：就移除个元素很难么？(opens new window) 双指针法（快慢指针法）：通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。 暴力解法时间复杂度：O(n^2) 双指针时间复杂度：O(n) 这道题目迷惑了不少同学，纠结于数组中的元素为什么不能删除，主要是因为以下两点： 数组在内存中是连续的地址空间，不能释放单一元素，如果要释放，就是全释放（程序运行结束，回收内存栈空间）。 C++中vector和array的区别一定要弄清楚，vector的底层实现是array，封装后使用更友好。 双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组和链表操作的面试题，都使用双指针法。 滑动窗口 数组：滑动窗口拯救了你(opens new window) 本题介绍了数组操作中的另一个重要思想：滑动窗口。 暴力解法时间复杂度：O(n^2) 滑动窗口时间复杂度：O(n) 本题中，主要要理解滑动窗口如何移动 窗口起始位置，达到动态更新窗口大小的，从而得出长度最小的符合条件的长度。 滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)的暴力解法降为O(n)。 如果没有接触过这一类的方法，很难想到类似的解题思路，滑动窗口方法还是很巧妙的。 模拟行为 数组：这个循环可以转懵很多人！(opens new window) 模拟类的题目在数组中很常见，不涉及到什么算法，就是单纯的模拟，十分考察大家对代码的掌控能力。 在这道题目中，我们再一次介绍到了循环不变量原则，其实这也是写程序中的重要原则。 相信大家有遇到过这种情况： 感觉题目的边界调节超多，一波接着一波的判断，找边界，拆了东墙补西墙，好不容易运行通过了，代码写的十分冗余，毫无章法，其实真正解决题目的代码都是简洁的，或者有原则性的，大家可以在这道题目中体会到这一点. 前缀和 数组：求取区间和(opens new window) 前缀和的思路其实很简单，但非常实用，如果没接触过的录友，也很难想到这个解法维度，所以 这是开阔思路 而难度又不高的好题。 总结 链表链表理论基础什么是链表，链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向null（空指针的意思）。 链表的入口节点称为链表的头结点也就是head。 如图所示： 链表的类型接下来说一下链表的几种类型: 单链表刚刚说的就是单链表。 双链表单链表中的指针域只能指向节点的下一个节点。 双链表：每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。 双链表 既可以向前查询也可以向后查询。 如图所示： 循环链表循环链表，顾名思义，就是链表首尾相连。 循环链表可以用来解决约瑟夫环问题。 链表的存储方式了解完链表的类型，再来说一说链表在内存中的存储方式。 数组是在内存中是连续分布的，但是链表在内存中可不是连续分布的。 链表是通过指针域的指针链接在内存中各个节点。 所以链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。 如图所示： 这个链表起始节点为2， 终止节点为7， 各个节点分布在内存的不同地址空间上，通过指针串联在一起。 链表的定义接下来说一说链表的定义。 链表节点的定义，很多同学在面试的时候都写不好。 这是因为平时在刷leetcode的时候，链表的节点都默认定义好了，直接用就行了，所以同学们都没有注意到链表的节点是如何定义的。 而在面试的时候，一旦要自己手写链表，就写的错漏百出。 这里我给出CC++的定义链表节点方式，如下所示： // 单链表struct ListNode int val; // 节点上存储的元素 ListNode *next; // 指向下一个节点的指针 ListNode(int x) : val(x), next(NULL) // 节点的构造函数;/** JAVA * Definition for singly-linked list. * public class ListNode * int val; * ListNode next; * ListNode() * ListNode(int val) this.val = val; * ListNode(int val, ListNode next) this.val = val; this.next = next; * */ 有同学说了，我不定义构造函数行不行，答案是可以的，C++默认生成一个构造函数。 但是这个构造函数不会初始化任何成员变量，下面我来举两个例子： 通过自己定义构造函数初始化节点： ListNode* head = new ListNode(5); 使用默认构造函数初始化节点： ListNode* head = new ListNode();head-val = 5; 所以如果不定义构造函数使用默认构造函数的话，在初始化的时候就不能直接给变量赋值！ 链表的操作删除节点删除D节点，如图所示： 只要将C节点的next指针 指向E节点就可以了。 那有同学说了，D节点不是依然存留在内存里么？只不过是没有在这个链表里而已。 是这样的，所以在C++里最好是再手动释放这个D节点，释放这块内存。 其他语言例如Java、Python，就有自己的内存回收机制，就不用自己手动释放了。 添加节点 可以看出链表的增添和删除都是O(1)操作，也不会影响到其他节点。 但是要注意，要是删除第五个节点，需要从头节点查找到第四个节点通过next指针进行删除操作，查找的时间复杂度是O(n)。 性能分析再把链表的特性和数组的特性进行一个对比，如图所示： 数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。 链表的长度可以是不固定的，并且可以动态增删， 适合数据量不固定，频繁增删，较少查询的场景。 相信大家已经对链表足够的了解，后面我会讲解关于链表的高频面试题目，我们下期见！ JAVA版本public class ListNode // 结点的值 int val; // 下一个结点 ListNode next; // 节点的构造函数(无参) public ListNode() // 节点的构造函数(有一个参数) public ListNode(int val) this.val = val; // 节点的构造函数(有两个参数) public ListNode(int val, ListNode next) this.val = val; this.next = next; 移除链表元素力扣题目链接 设计链表力扣题目链接 反转链表力扣题目链接 原地反转，只需要把每个节点间的指向反转就可以 尝试递归调用 两两交换链表中的节点力扣题目链接 删除链表的倒数第N个节点力扣题目链接 面试题 02.07. 链表相交力扣题目链接 142.环形链表II力扣题目链接 哈希表242.有效的字母异位词力扣题目链接 349. 两个数组的交集力扣题目链接 第202题. 快乐数力扣题目链接 1. 两数之和力扣题目链接 第454题.四数相加II力扣题目链接 383. 赎金信力扣题目链接 第15题. 三数之和力扣题目链接 第18题. 四数之和力扣题目链接 字符串344.反转字符串力扣题目链接 aa^b: 先把a和b中，不相同的位保存到a，现在a中置1的位，代表原始的a和b不相同的位，而0，就是a和b相同的位。 ba^b: 不相同的位是1和原始b异或，就得到原始a的那个位的值；相同的位是0和原始b异或就是原始a或者原始b的值（本来就相同）。现在得到的就是原始a的值，现在存在b中。 aa^b：和上面相同。 a，b已经交换。 541. 反转字符串II力扣题目链接 动态规划数位DP","tags":["算法","笔记"]},{"title":"技术派项目笔记","path":"/2025/06/04/技术派项目笔记/","content":"开启新项目要考虑的事情业务模块拆解首先对业务模块进行拆解，除了业务属性纬度以外，还有一个很重要的属性就是参与者角色。 首先对功能、模块划分、概要设计，详细设计有初步的了解。 主要就是功能模块设计 + DB 的设计。 启动项目mysql 启动 redis 启动： 路径 ： D:\\workTools\\Redis-x64-3.2.100 redis-server.exe redis.windows.conf 启动成功，点击进入首页: http://127.0.0.1:8080 跑环境 font style=color:#000000;D:\\sys\\Desktop\\Workplace\\IDEA_Projects\\paicoding/font下载位置 font style=color:#000000;git clone git@github.com:itwanger/paicoding.git D:\\sys\\Desktop\\Workplace\\IDEA_Projects\\paicoding/fontgit 下载 git clone 出现报错 ， 原因：github ssh 秘钥没有配置 1 打开运行，输入services.msc，确定 找到 OpenSSH Authentication Agent 服务，需开启它. ssh-keygen -t rsa -C “你的邮箱地址” 我用的是Administrator用户，执行完后，可以在 C:\\Users\\Administrator.ssh 目录下生成 id_rsa 和 id_rsa.pub 这两个文件。如果你没有用Administrator用户，也是在类似的目录下 项目结构该项目主要有五个模块，各模块功能如下： paicoding-api： 用于定义一些通用的枚举、实体类，包含 DO（数据对象）、DTO（数据传输对象）、VO（视图对象）等，为不同层之间的数据交互提供统一的格式和规范。 paicoding-core： 核心工具和组件相关的模块，像工具包 util 以及通用的组件都放在这里。按照包路径对模块功能进行拆分，例如搜索、缓存、推荐等功能组件。 paicoding-service： 服务模块，负责业务相关的主要逻辑，数据库（DB）的操作都在这个模块中进行。 paicoding-ui： 存放 HTML 前端资源，包括 JavaScript、CSS、Thymeleaf 等，主要用于构建用户界面。 paicoding-web： Web 模块，是 HTTP 请求的入口，也是项目启动的入口，同时包含权限身份校验、全局异常处理等功能。 web 模块：admin：admin 目录存放和管理后台相关的代码，主要处理管理员对系统的管理操作。 common：common 一般用来存放项目通用的代码，提高代码的复用性和可维护性。 comoinent：TemplateEngineHelper Thymeleaf模版渲染引擎，通过末班引擎进行服务端渲染（SSR），在初次渲染速度方面有显著优势。 configForumDataSourceInitializer 用来进行数据库表的初始化，首次启动时候执行： DbChangeSetLoader 杂项笔记请求参数解析如果一个请求不会引起服务器上任何资源的状态变化，那就可以使用 GET 请求 AOP技术派中的 AOP 记录接口访问日志是放在 paicoding-core 模块下的 mdc 包下。 三层架构 为什么要使用微服务而不是单体项目呢？用不用微服务取决于业务量，能用单体的绝对不用微服务，毕竟单体的好处显而易见，当业务简单的时候，部署非常简单，技术架构也简单，不用考虑微服务间的调用什么的，但是随着业务的复杂，单体的缺点也就暴露出来了，例如修改一个模块上线，就要整个服务下线，这在某些业务中是不被允许的，其次单体复杂度高了，部署就缓慢了，出现问题排查也很困难，这些的前提就是业务复杂度提高了。 所以微服务的出现在我看来最初就是为了解决业务复杂单体所出现的问题的，将业务拆分到不同的模块，不同的模块单独部署开发，提高了开发效率，节省了维护时间成本，问题排查也方便了很多，微服务也并不是没有缺点，只不过是维护一个平衡，例如需要引入注册中心，为了方便配置的修改，还需要引入配置中心，不可能修改一个配置重新打包发布，服务间的调用组件，很多都是为了使用微服务而引入的。 所以没有哪种技术更好，只有哪种技术更符合当下的业务，抛开业务谈技术，在我看来并不是那么可靠。 工厂模式创建型设计模式，定义一个创建对象的接口，但让实现这个接口的类决定实例化哪个类。 工厂方法把类的实例化延迟到子类中进行。 @Bean 就是一个工厂方法 各种注解@Slf4j@Slf4j：借助 Lombok 自动添加 SLF4J 日志记录器，简化日志记录代码。 @Value@Configuration@Configuration：把类标记为 Spring 配置类，允许在类里使用 @Bean 注解定义 Spring Bean。 在 Spring 应用启动时，Spring 会扫描带有 @Configuration 注解的类，将其作为配置类来处理，把类里使用 @Bean 注解定义的方法返回的对象注册到 Spring 容器中。 @Component@Component：通用的组件注解，用于标记一个类为 Spring 组件，Spring 会自动扫描并将其注册到容器中。 @Service@Service：@Component 的特殊化注解，通常用于标记服务层类。 @Repository@Repository：@Component 的特殊化注解，通常用于标记数据访问层类。 @Controller@Controller：@Component 的特殊化注解，通常用于标记 Web 控制器类。 @Bean@Bean注册一个实体类 @册一个实体类 实体对象 用 GET 还是 POSTgit clone https://github.com/itwanger/paicoding-admin.git D:\\sys\\Desktop\\Workplace\\IDEA_Projects\\paicoding-admin","tags":["项目","技术派"]},{"title":"个人博客搭建","path":"/2025/06/02/个人博客搭建/","content":"环境配置: node -v #查看node版本npm -v #查看npm版本 安装 hexo: npm install hexo-cli -g 出现权限问题 ,修改: sudo chown -R $(whoami) $(npm config get prefix)/lib/node_modules,bin,share #修改权限范围 初始化个人博客文件夹: hexo init /Users/mac/Blog/JakicDong.github.io # 博客初始化，这里是创建的本地博客文件夹，执行后会自动创建，我这里图简洁，直接用了我网站的地址 hihulu.github.io 为文件名cd /Users/mac/Blog/JakicDong.github.io # 进入本地的博客文件夹hexo server # 打开本地服务器预览 UsersmacJakicDong.github.io 4.Github部署为了部署到Github上，需要安装hexo-deployer-git插件，命令如下： sudo npm install hexo-deployer-git --save 然后找到自己的本地博客文件夹，修改博客根目录下的_config.yml文件中的deploy，修改成： deploy: type: git repo: git@github.com:JakicDong/JakicDong.github.io.git #这个地址是从github仓库复制过来的ssh branch: main （⚠️注意，这里有一个很容易犯错的点，我们在创建“hihulu.github.io”这个仓库的时候，一定要创建和你github用户名相同的仓库，后面加.http://github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是http://xxxx.github.io，其中xxx就是你注册GitHub的用户名。所以上图我的仓库显示的是“hihuluhihulu.github.io”，如果仓库名和用户名不一致，后面是根本打不开这个网站的～） 然后就可以通过以下命令行上传github了 hexo g #hexo generate的简写，即把刚刚做的改动生成更新一下hexo d #hexo deploy，上传到github网站 还有一些常用的命令行： hexo clean #清空一下缓存，有时候博客页面显示不正常也可以试试这个命令行hexo server # 在本地服务器运行，网址默认https://localhost:4000 5.更改主题很多前端大牛博主设计了很多好看的主题，网址https://hexo.io/themes/ ，可以预览并选择你喜爱的主题进行应用。 这里浅以一个蛮火的主题butterfly主题来走一个安装主题的步骤～ 执行以下代码： git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly 运行成功之后，在项目文件夹根目录中可以查看到新的主题themes文件夹：butterfly 在博客的项目文件夹下，修改_config.yml配置文件如下: # theme: landscape 默认主题theme: butterfly 此时主题还不能正常配置使用，需要安装pug 以及stylus 的渲染器： npm install hexo-renderer-pug hexo-renderer-stylus --save 最后推送到github # 清除缓存b.json 和已生成的静态文件 publichexo clean# 生成静态页面到默认设置的 public 文件夹hexo g# 部署到设定的仓库或上传部署至服务端hexo d 至此主题安装end，可访问https://hihulu.github.io/ 查看～ https://JakicDong.github.io/ # 7.4 常用命令hexo new name # 新建文章hexo new page name # 新建页面hexo g # 生成页面hexo d # 部署hexo g -d # 生成页面并部署hexo s # 本地预览hexo clean # 清除缓存和已生成的静态文件hexo help # 帮助","tags":["博客","hexo"]}]